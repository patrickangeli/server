name: Monitor Websites

on:
  schedule:
    - cron: '*/1 * * * *'  # Executa a cada 30 minutos
  workflow_dispatch:  # Permite execução manual

jobs:
  check-websites:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install Jekyll and dependencies
        run: |
          gem install bundler
          bundle install

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Create necessary directories and files
        run: |
          mkdir -p docs/_sass
          mkdir -p docs/assets/css
          echo '@import "main";' > docs/assets/css/style.scss
          echo '// Add your styles here' > docs/_sass/main.scss

      - name: Create Jekyll config
        run: |
          echo 'source: .' > docs/_config.yml
          echo 'destination: _site' >> docs/_config.yml
          echo 'sass:' >> docs/_config.yml
          echo '  sass_dir: _sass' >> docs/_config.yml
          echo '  style: compressed' >> docs/_config.yml
          echo 'theme: minima' >> docs/_config.yml
          echo 'gem "minima"' > docs/Gemfile

      - name: Check websites for changes
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          WEBSITE_URLS: ${{ secrets.WEBSITE_URLS }}
        run: |
          import requests
          from bs4 import BeautifulSoup
          import os
          import hashlib
          import json

          # Cria a pasta 'docs' se não existir
          pasta_docs = 'docs'
          if not os.path.exists(pasta_docs):
              os.makedirs(pasta_docs)
              print(f'A pasta "{pasta_docs}" foi criada.')
          else:
              print(f'A pasta "{pasta_docs}" já existe.')

          # Configura o arquivo de log
          log_file = 'docs/change_log.json'
          if not os.path.exists(log_file):
              with open(log_file, 'w') as f:
                  json.dump([], f)  # Cria um arquivo JSON vazio para log

          def send_telegram_message(message):
              token = os.environ['TELEGRAM_TOKEN']
              chat_id = os.environ['TELEGRAM_CHAT_ID']
              url = f"https://api.telegram.org/bot{token}/sendMessage"
              payload = {
                  "chat_id": chat_id,
                  "text": message
              }
              requests.post(url, json=payload)

          def check_website(url):
              response = requests.get(url)
              soup = BeautifulSoup(response.text, 'html.parser')
              content = soup.get_text()
              return hashlib.md5(content.encode()).hexdigest()

          # Carregar URLs dos sites a serem monitorados
          websites = json.loads(os.environ['WEBSITE_URLS'])

          # Carregar hashes anteriores
          try:
              with open('docs/last_hashes.json', 'r') as f:
                  last_hashes = json.load(f)
          except FileNotFoundError:
              last_hashes = {}

          current_hashes = {}
          updates = []

          for url in websites:
              current_hash = check_website(url)
              current_hashes[url] = current_hash

              if url not in last_hashes or current_hash != last_hashes[url]:
                  update_message = f"A página {url} foi atualizada!"
                  updates.append(update_message)

          if updates:
              send_telegram_message("\n".join(updates))

              # Salvar as mudanças detectadas no log
              with open(log_file, 'r+') as f:
                  logs = json.load(f)
                  for update in updates:
                      logs.append({'update': update})
                  f.seek(0)
                  json.dump(logs, f)

          # Salvar os novos hashes
          with open('docs/last_hashes.json', 'w') as f:
              json.dump(current_hashes, f)

          if not updates:
              print("Nenhuma mudança detectada em nenhum site.")
        shell: python

      - name: Build Jekyll site
        run: |
          cd docs
          bundle install
          bundle exec jekyll build
