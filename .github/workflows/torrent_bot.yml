name: Telegram Torrent Bot

on:
  workflow_dispatch:

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone python3-pip
          pip3 install python-telegram-bot rclone-python
          
      - name: Configure Rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf
          
      - name: Setup Telegram Bot
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: "Bot iniciado e pronto para receber torrents"
          
      - name: Mount Rclone Drive
        run: |
          sudo mkdir -p /mnt/drive
          sudo chmod 777 /mnt/drive
          rclone mount onedrive:/ /mnt/drive --daemon
          
      - name: Create Process Script
        run: |
          cat > process_torrent.py << 'EOF'
          from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes
          from telegram.ext import filters
          import transmissionrpc
          import os
          import time
          import subprocess
          
          def get_rclone_folders():
              result = subprocess.run(['rclone', 'lsf', 'remote:', '--dirs-only'], capture_output=True, text=True)
              folders = result.stdout.strip().split('\n')
              return folders
          
          def create_folder_keyboard(folders):
              keyboard = [[f"📁 {folder}"] for folder in folders]
              return {"keyboard": keyboard, "one_time_keyboard": True, "resize_keyboard": True}
          
          async def start(update, context):
              folders = get_rclone_folders()
              reply_markup = create_folder_keyboard(folders)
              await update.message.reply_text(
                  "Selecione a pasta para download:",
                  reply_markup=reply_markup
              )
              context.user_data['waiting_for_folder'] = True
          
          async def handle_message(update, context):
              if context.user_data.get('waiting_for_folder'):
                  selected_folder = update.message.text.replace("📁 ", "")
                  download_path = f"/mnt/drive/{selected_folder}"
                  context.user_data['download_path'] = download_path
                  context.user_data['waiting_for_folder'] = False
                  await update.message.reply_text(f"Pasta selecionada: {selected_folder}\nEnvie o link magnet ou arquivo torrent.")
                  return
          
              try:
                  magnet_link = update.message.text
                  if magnet_link.startswith('magnet:') or magnet_link.endswith('.torrent'):
                      await update.message.reply_text("⬇️ Iniciando download...")
                      
                      download_path = context.user_data.get('download_path', '/mnt/drive')
                      tc = transmissionrpc.Client('localhost', port=9091)
                      torrent = tc.add_torrent(magnet_link, download_dir=download_path)
                      
                      while True:
                          t = tc.get_torrent(torrent.id)
                          if t.status == 'downloading':
                              progress = t.progress
                              await update.message.reply_text(f"📥 Download: {progress:.1f}%")
                          elif t.status == 'seeding':
                              await update.message.reply_text("✅ Download completo!")
                              break
                          time.sleep(30)
                          
              except Exception as e:
                  await update.message.reply_text(f"❌ Erro: {str(e)}")
          
          async def main():
              application = Application.builder().token(os.environ['TELEGRAM_TOKEN']).build()
              
              application.add_handler(CommandHandler("start", start))
              application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
              
              await application.initialize()
              await application.start()
              await application.run_polling()
          
          if __name__ == '__main__':
              import asyncio
              asyncio.run(main())

          EOF
          
      - name: Download Torrent
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: python3 process_torrent.py
